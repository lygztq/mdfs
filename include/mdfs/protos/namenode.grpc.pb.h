// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mdfs/protos/namenode.proto
#ifndef GRPC_mdfs_2fprotos_2fnamenode_2eproto__INCLUDED
#define GRPC_mdfs_2fprotos_2fnamenode_2eproto__INCLUDED

#include "mdfs/protos/namenode.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace mdfs {
namespace message {

class NameNodeService final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // file system command
    virtual ::grpc::Status Command(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::mdfs::message::NameNodeToClientMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToClientMessage>> AsyncCommand(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToClientMessage>>(AsyncCommandRaw(context, request, cq));
    }
    virtual ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::mdfs::message::NameNodeToDataNodeMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToDataNodeMessage>> AsyncHeartbeat(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToDataNodeMessage>>(AsyncHeartbeatRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToClientMessage>* AsyncCommandRaw(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mdfs::message::NameNodeToDataNodeMessage>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Command(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::mdfs::message::NameNodeToClientMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToClientMessage>> AsyncCommand(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToClientMessage>>(AsyncCommandRaw(context, request, cq));
    }
    ::grpc::Status Heartbeat(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::mdfs::message::NameNodeToDataNodeMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToDataNodeMessage>> AsyncHeartbeat(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToDataNodeMessage>>(AsyncHeartbeatRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToClientMessage>* AsyncCommandRaw(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToDataNodeMessage>* AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Command_;
    const ::grpc::RpcMethod rpcmethod_Heartbeat_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // file system command
    virtual ::grpc::Status Command(::grpc::ServerContext* context, const ::mdfs::message::ClientToNameNodeMessage* request, ::mdfs::message::NameNodeToClientMessage* response);
    virtual ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToNameNodeMessage* request, ::mdfs::message::NameNodeToDataNodeMessage* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Command() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* context, const ::mdfs::message::ClientToNameNodeMessage* request, ::mdfs::message::NameNodeToClientMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommand(::grpc::ServerContext* context, ::mdfs::message::ClientToNameNodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::mdfs::message::NameNodeToClientMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Heartbeat() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToNameNodeMessage* request, ::mdfs::message::NameNodeToDataNodeMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestHeartbeat(::grpc::ServerContext* context, ::mdfs::message::DataNodeToNameNodeMessage* request, ::grpc::ServerAsyncResponseWriter< ::mdfs::message::NameNodeToDataNodeMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Command<WithAsyncMethod_Heartbeat<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Command() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Command(::grpc::ServerContext* context, const ::mdfs::message::ClientToNameNodeMessage* request, ::mdfs::message::NameNodeToClientMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Heartbeat() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToNameNodeMessage* request, ::mdfs::message::NameNodeToDataNodeMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Command : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Command() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::mdfs::message::ClientToNameNodeMessage, ::mdfs::message::NameNodeToClientMessage>(std::bind(&WithStreamedUnaryMethod_Command<BaseClass>::StreamedCommand, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Command() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Command(::grpc::ServerContext* context, const ::mdfs::message::ClientToNameNodeMessage* request, ::mdfs::message::NameNodeToClientMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mdfs::message::ClientToNameNodeMessage,::mdfs::message::NameNodeToClientMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Heartbeat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Heartbeat() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::mdfs::message::DataNodeToNameNodeMessage, ::mdfs::message::NameNodeToDataNodeMessage>(std::bind(&WithStreamedUnaryMethod_Heartbeat<BaseClass>::StreamedHeartbeat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Heartbeat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Heartbeat(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToNameNodeMessage* request, ::mdfs::message::NameNodeToDataNodeMessage* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedHeartbeat(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mdfs::message::DataNodeToNameNodeMessage,::mdfs::message::NameNodeToDataNodeMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Command<WithStreamedUnaryMethod_Heartbeat<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Command<WithStreamedUnaryMethod_Heartbeat<Service > > StreamedService;
};

}  // namespace message
}  // namespace mdfs


#endif  // GRPC_mdfs_2fprotos_2fnamenode_2eproto__INCLUDED
