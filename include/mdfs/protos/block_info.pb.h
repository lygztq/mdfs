// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdfs/protos/block_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mdfs_2fprotos_2fblock_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mdfs_2fprotos_2fblock_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mdfs_2fprotos_2fblock_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mdfs_2fprotos_2fblock_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mdfs_2fprotos_2fblock_5finfo_2eproto;
namespace mdfs {
namespace message {
class BlockInfo;
class BlockInfoDefaultTypeInternal;
extern BlockInfoDefaultTypeInternal _BlockInfo_default_instance_;
}  // namespace message
}  // namespace mdfs
PROTOBUF_NAMESPACE_OPEN
template<> ::mdfs::message::BlockInfo* Arena::CreateMaybeMessage<::mdfs::message::BlockInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mdfs {
namespace message {

// ===================================================================

class BlockInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mdfs.message.BlockInfo) */ {
 public:
  BlockInfo();
  virtual ~BlockInfo();

  BlockInfo(const BlockInfo& from);
  BlockInfo(BlockInfo&& from) noexcept
    : BlockInfo() {
    *this = ::std::move(from);
  }

  inline BlockInfo& operator=(const BlockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInfo& operator=(BlockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInfo* internal_default_instance() {
    return reinterpret_cast<const BlockInfo*>(
               &_BlockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BlockInfo& a, BlockInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInfo* New() const final {
    return CreateMaybeMessage<BlockInfo>(nullptr);
  }

  BlockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInfo& from);
  void MergeFrom(const BlockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mdfs.message.BlockInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mdfs_2fprotos_2fblock_5finfo_2eproto);
    return ::descriptor_table_mdfs_2fprotos_2fblock_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatanodeFieldNumber = 5,
    kIdFieldNumber = 1,
    kNumBytesFieldNumber = 2,
    kStampFieldNumber = 3,
    kBlockSizeFieldNumber = 4,
  };
  // repeated string datanode = 5;
  int datanode_size() const;
  private:
  int _internal_datanode_size() const;
  public:
  void clear_datanode();
  const std::string& datanode(int index) const;
  std::string* mutable_datanode(int index);
  void set_datanode(int index, const std::string& value);
  void set_datanode(int index, std::string&& value);
  void set_datanode(int index, const char* value);
  void set_datanode(int index, const char* value, size_t size);
  std::string* add_datanode();
  void add_datanode(const std::string& value);
  void add_datanode(std::string&& value);
  void add_datanode(const char* value);
  void add_datanode(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& datanode() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_datanode();
  private:
  const std::string& _internal_datanode(int index) const;
  std::string* _internal_add_datanode();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 numBytes = 2;
  void clear_numbytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 numbytes() const;
  void set_numbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_numbytes() const;
  void _internal_set_numbytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 stamp = 3;
  void clear_stamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp() const;
  void set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_stamp() const;
  void _internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 blockSize = 4;
  void clear_blocksize();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocksize() const;
  void set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blocksize() const;
  void _internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mdfs.message.BlockInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> datanode_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 numbytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocksize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mdfs_2fprotos_2fblock_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BlockInfo

// uint64 id = 1;
inline void BlockInfo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::id() const {
  // @@protoc_insertion_point(field_get:mdfs.message.BlockInfo.id)
  return _internal_id();
}
inline void BlockInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void BlockInfo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.id)
}

// uint64 numBytes = 2;
inline void BlockInfo::clear_numbytes() {
  numbytes_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_numbytes() const {
  return numbytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::numbytes() const {
  // @@protoc_insertion_point(field_get:mdfs.message.BlockInfo.numBytes)
  return _internal_numbytes();
}
inline void BlockInfo::_internal_set_numbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  numbytes_ = value;
}
inline void BlockInfo::set_numbytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_numbytes(value);
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.numBytes)
}

// uint64 stamp = 3;
inline void BlockInfo::clear_stamp() {
  stamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_stamp() const {
  return stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::stamp() const {
  // @@protoc_insertion_point(field_get:mdfs.message.BlockInfo.stamp)
  return _internal_stamp();
}
inline void BlockInfo::_internal_set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  stamp_ = value;
}
inline void BlockInfo::set_stamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.stamp)
}

// uint64 blockSize = 4;
inline void BlockInfo::clear_blocksize() {
  blocksize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::_internal_blocksize() const {
  return blocksize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockInfo::blocksize() const {
  // @@protoc_insertion_point(field_get:mdfs.message.BlockInfo.blockSize)
  return _internal_blocksize();
}
inline void BlockInfo::_internal_set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blocksize_ = value;
}
inline void BlockInfo::set_blocksize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blocksize(value);
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.blockSize)
}

// repeated string datanode = 5;
inline int BlockInfo::_internal_datanode_size() const {
  return datanode_.size();
}
inline int BlockInfo::datanode_size() const {
  return _internal_datanode_size();
}
inline void BlockInfo::clear_datanode() {
  datanode_.Clear();
}
inline std::string* BlockInfo::add_datanode() {
  // @@protoc_insertion_point(field_add_mutable:mdfs.message.BlockInfo.datanode)
  return _internal_add_datanode();
}
inline const std::string& BlockInfo::_internal_datanode(int index) const {
  return datanode_.Get(index);
}
inline const std::string& BlockInfo::datanode(int index) const {
  // @@protoc_insertion_point(field_get:mdfs.message.BlockInfo.datanode)
  return _internal_datanode(index);
}
inline std::string* BlockInfo::mutable_datanode(int index) {
  // @@protoc_insertion_point(field_mutable:mdfs.message.BlockInfo.datanode)
  return datanode_.Mutable(index);
}
inline void BlockInfo::set_datanode(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.datanode)
  datanode_.Mutable(index)->assign(value);
}
inline void BlockInfo::set_datanode(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:mdfs.message.BlockInfo.datanode)
  datanode_.Mutable(index)->assign(std::move(value));
}
inline void BlockInfo::set_datanode(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  datanode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:mdfs.message.BlockInfo.datanode)
}
inline void BlockInfo::set_datanode(int index, const char* value, size_t size) {
  datanode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.BlockInfo.datanode)
}
inline std::string* BlockInfo::_internal_add_datanode() {
  return datanode_.Add();
}
inline void BlockInfo::add_datanode(const std::string& value) {
  datanode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:mdfs.message.BlockInfo.datanode)
}
inline void BlockInfo::add_datanode(std::string&& value) {
  datanode_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:mdfs.message.BlockInfo.datanode)
}
inline void BlockInfo::add_datanode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  datanode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:mdfs.message.BlockInfo.datanode)
}
inline void BlockInfo::add_datanode(const char* value, size_t size) {
  datanode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:mdfs.message.BlockInfo.datanode)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockInfo::datanode() const {
  // @@protoc_insertion_point(field_list:mdfs.message.BlockInfo.datanode)
  return datanode_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockInfo::mutable_datanode() {
  // @@protoc_insertion_point(field_mutable_list:mdfs.message.BlockInfo.datanode)
  return &datanode_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace mdfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mdfs_2fprotos_2fblock_5finfo_2eproto
