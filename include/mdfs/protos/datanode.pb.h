// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdfs/protos/datanode.proto

#ifndef PROTOBUF_mdfs_2fprotos_2fdatanode_2eproto__INCLUDED
#define PROTOBUF_mdfs_2fprotos_2fdatanode_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "mdfs/protos/block_info.pb.h"
// @@protoc_insertion_point(includes)

namespace mdfs {
namespace message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto();
void protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto();
void protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto();

class DataNodeCommMessage;
class TransferMessage;
class TransferReturnMessage;

// ===================================================================

class TransferMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mdfs.message.TransferMessage) */ {
 public:
  TransferMessage();
  virtual ~TransferMessage();

  TransferMessage(const TransferMessage& from);

  inline TransferMessage& operator=(const TransferMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferMessage& default_instance();

  static const TransferMessage* internal_default_instance();

  void Swap(TransferMessage* other);

  // implements Message ----------------------------------------------

  inline TransferMessage* New() const { return New(NULL); }

  TransferMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferMessage& from);
  void MergeFrom(const TransferMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferMessage* other);
  void UnsafeMergeFrom(const TransferMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 command = 1;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // optional .mdfs.message.BlockInfo block = 2;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 2;
  const ::mdfs::message::BlockInfo& block() const;
  ::mdfs::message::BlockInfo* mutable_block();
  ::mdfs::message::BlockInfo* release_block();
  void set_allocated_block(::mdfs::message::BlockInfo* block);

  // optional bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mdfs.message.TransferMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::mdfs::message::BlockInfo* block_;
  ::google::protobuf::int32 command_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void  protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto();
  friend void protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TransferMessage> TransferMessage_default_instance_;

// -------------------------------------------------------------------

class TransferReturnMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mdfs.message.TransferReturnMessage) */ {
 public:
  TransferReturnMessage();
  virtual ~TransferReturnMessage();

  TransferReturnMessage(const TransferReturnMessage& from);

  inline TransferReturnMessage& operator=(const TransferReturnMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferReturnMessage& default_instance();

  static const TransferReturnMessage* internal_default_instance();

  void Swap(TransferReturnMessage* other);

  // implements Message ----------------------------------------------

  inline TransferReturnMessage* New() const { return New(NULL); }

  TransferReturnMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferReturnMessage& from);
  void MergeFrom(const TransferReturnMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferReturnMessage* other);
  void UnsafeMergeFrom(const TransferReturnMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:mdfs.message.TransferReturnMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void  protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto();
  friend void protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TransferReturnMessage> TransferReturnMessage_default_instance_;

// -------------------------------------------------------------------

class DataNodeCommMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mdfs.message.DataNodeCommMessage) */ {
 public:
  DataNodeCommMessage();
  virtual ~DataNodeCommMessage();

  DataNodeCommMessage(const DataNodeCommMessage& from);

  inline DataNodeCommMessage& operator=(const DataNodeCommMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataNodeCommMessage& default_instance();

  static const DataNodeCommMessage* internal_default_instance();

  void Swap(DataNodeCommMessage* other);

  // implements Message ----------------------------------------------

  inline DataNodeCommMessage* New() const { return New(NULL); }

  DataNodeCommMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataNodeCommMessage& from);
  void MergeFrom(const DataNodeCommMessage& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataNodeCommMessage* other);
  void UnsafeMergeFrom(const DataNodeCommMessage& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mdfs.message.BlockInfo block = 1;
  bool has_block() const;
  void clear_block();
  static const int kBlockFieldNumber = 1;
  const ::mdfs::message::BlockInfo& block() const;
  ::mdfs::message::BlockInfo* mutable_block();
  ::mdfs::message::BlockInfo* release_block();
  void set_allocated_block(::mdfs::message::BlockInfo* block);

  // optional bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional int32 command = 3;
  void clear_command();
  static const int kCommandFieldNumber = 3;
  ::google::protobuf::int32 command() const;
  void set_command(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mdfs.message.DataNodeCommMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::mdfs::message::BlockInfo* block_;
  ::google::protobuf::int32 command_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void  protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_impl();
  friend void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto();
  friend void protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<DataNodeCommMessage> DataNodeCommMessage_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferMessage

// optional int32 command = 1;
inline void TransferMessage::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 TransferMessage::command() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.command)
  return command_;
}
inline void TransferMessage::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.TransferMessage.command)
}

// optional .mdfs.message.BlockInfo block = 2;
inline bool TransferMessage::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
inline void TransferMessage::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
inline const ::mdfs::message::BlockInfo& TransferMessage::block() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.block)
  return block_ != NULL ? *block_
                         : *::mdfs::message::BlockInfo::internal_default_instance();
}
inline ::mdfs::message::BlockInfo* TransferMessage::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::mdfs::message::BlockInfo;
  }
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferMessage.block)
  return block_;
}
inline ::mdfs::message::BlockInfo* TransferMessage::release_block() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferMessage.block)
  
  ::mdfs::message::BlockInfo* temp = block_;
  block_ = NULL;
  return temp;
}
inline void TransferMessage::set_allocated_block(::mdfs::message::BlockInfo* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferMessage.block)
}

// optional bytes data = 3;
inline void TransferMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.TransferMessage.data)
}
inline void TransferMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.TransferMessage.data)
}
inline void TransferMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.TransferMessage.data)
}
inline ::std::string* TransferMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferMessage.data)
}

inline const TransferMessage* TransferMessage::internal_default_instance() {
  return &TransferMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// TransferReturnMessage

// optional int32 status = 1;
inline void TransferReturnMessage::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 TransferReturnMessage::status() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferReturnMessage.status)
  return status_;
}
inline void TransferReturnMessage::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.TransferReturnMessage.status)
}

// optional bytes data = 2;
inline void TransferReturnMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TransferReturnMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferReturnMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferReturnMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.TransferReturnMessage.data)
}
inline void TransferReturnMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.TransferReturnMessage.data)
}
inline void TransferReturnMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.TransferReturnMessage.data)
}
inline ::std::string* TransferReturnMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferReturnMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TransferReturnMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferReturnMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TransferReturnMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferReturnMessage.data)
}

inline const TransferReturnMessage* TransferReturnMessage::internal_default_instance() {
  return &TransferReturnMessage_default_instance_.get();
}
// -------------------------------------------------------------------

// DataNodeCommMessage

// optional .mdfs.message.BlockInfo block = 1;
inline bool DataNodeCommMessage::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
inline void DataNodeCommMessage::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
inline const ::mdfs::message::BlockInfo& DataNodeCommMessage::block() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.block)
  return block_ != NULL ? *block_
                         : *::mdfs::message::BlockInfo::internal_default_instance();
}
inline ::mdfs::message::BlockInfo* DataNodeCommMessage::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::mdfs::message::BlockInfo;
  }
  // @@protoc_insertion_point(field_mutable:mdfs.message.DataNodeCommMessage.block)
  return block_;
}
inline ::mdfs::message::BlockInfo* DataNodeCommMessage::release_block() {
  // @@protoc_insertion_point(field_release:mdfs.message.DataNodeCommMessage.block)
  
  ::mdfs::message::BlockInfo* temp = block_;
  block_ = NULL;
  return temp;
}
inline void DataNodeCommMessage::set_allocated_block(::mdfs::message::BlockInfo* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.DataNodeCommMessage.block)
}

// optional bytes data = 2;
inline void DataNodeCommMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataNodeCommMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataNodeCommMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.DataNodeCommMessage.data)
}
inline void DataNodeCommMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.DataNodeCommMessage.data)
}
inline void DataNodeCommMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.DataNodeCommMessage.data)
}
inline ::std::string* DataNodeCommMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.DataNodeCommMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataNodeCommMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.DataNodeCommMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataNodeCommMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.DataNodeCommMessage.data)
}

// optional int32 command = 3;
inline void DataNodeCommMessage::clear_command() {
  command_ = 0;
}
inline ::google::protobuf::int32 DataNodeCommMessage::command() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.command)
  return command_;
}
inline void DataNodeCommMessage::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.DataNodeCommMessage.command)
}

inline const DataNodeCommMessage* DataNodeCommMessage::internal_default_instance() {
  return &DataNodeCommMessage_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace mdfs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mdfs_2fprotos_2fdatanode_2eproto__INCLUDED
