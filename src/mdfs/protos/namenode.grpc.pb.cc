// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mdfs/protos/namenode.proto

#include "mdfs/protos/namenode.pb.h"
#include "mdfs/protos/namenode.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace mdfs {
namespace message {

static const char* NameNodeService_method_names[] = {
  "/mdfs.message.NameNodeService/Command",
  "/mdfs.message.NameNodeService/Heartbeat",
};

std::unique_ptr< NameNodeService::Stub> NameNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< NameNodeService::Stub> stub(new NameNodeService::Stub(channel));
  return stub;
}

NameNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Command_(NameNodeService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Heartbeat_(NameNodeService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NameNodeService::Stub::Command(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::mdfs::message::NameNodeToClientMessage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Command_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToClientMessage>* NameNodeService::Stub::AsyncCommandRaw(::grpc::ClientContext* context, const ::mdfs::message::ClientToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToClientMessage>(channel_.get(), cq, rpcmethod_Command_, context, request);
}

::grpc::Status NameNodeService::Stub::Heartbeat(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::mdfs::message::NameNodeToDataNodeMessage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Heartbeat_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToDataNodeMessage>* NameNodeService::Stub::AsyncHeartbeatRaw(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToNameNodeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mdfs::message::NameNodeToDataNodeMessage>(channel_.get(), cq, rpcmethod_Heartbeat_, context, request);
}

NameNodeService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      NameNodeService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NameNodeService::Service, ::mdfs::message::ClientToNameNodeMessage, ::mdfs::message::NameNodeToClientMessage>(
          std::mem_fn(&NameNodeService::Service::Command), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      NameNodeService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< NameNodeService::Service, ::mdfs::message::DataNodeToNameNodeMessage, ::mdfs::message::NameNodeToDataNodeMessage>(
          std::mem_fn(&NameNodeService::Service::Heartbeat), this)));
}

NameNodeService::Service::~Service() {
}

::grpc::Status NameNodeService::Service::Command(::grpc::ServerContext* context, const ::mdfs::message::ClientToNameNodeMessage* request, ::mdfs::message::NameNodeToClientMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameNodeService::Service::Heartbeat(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToNameNodeMessage* request, ::mdfs::message::NameNodeToDataNodeMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mdfs
}  // namespace message

