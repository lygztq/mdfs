// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mdfs/protos/datanode.proto

#include "mdfs/protos/datanode.pb.h"
#include "mdfs/protos/datanode.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace mdfs {
namespace message {

static const char* DataNodeService_method_names[] = {
  "/mdfs.message.DataNodeService/Communicate",
  "/mdfs.message.DataNodeService/Transfer",
};

std::unique_ptr< DataNodeService::Stub> DataNodeService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DataNodeService::Stub> stub(new DataNodeService::Stub(channel));
  return stub;
}

DataNodeService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Communicate_(DataNodeService_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Transfer_(DataNodeService_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DataNodeService::Stub::Communicate(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToDataNodeMessage& request, ::mdfs::message::DataNodeToDataNodeMessage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Communicate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mdfs::message::DataNodeToDataNodeMessage>* DataNodeService::Stub::AsyncCommunicateRaw(::grpc::ClientContext* context, const ::mdfs::message::DataNodeToDataNodeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mdfs::message::DataNodeToDataNodeMessage>(channel_.get(), cq, rpcmethod_Communicate_, context, request);
}

::grpc::Status DataNodeService::Stub::Transfer(::grpc::ClientContext* context, const ::mdfs::message::ClientToDataNodeMessage& request, ::mdfs::message::DataNodeToClientMessage* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Transfer_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::mdfs::message::DataNodeToClientMessage>* DataNodeService::Stub::AsyncTransferRaw(::grpc::ClientContext* context, const ::mdfs::message::ClientToDataNodeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::mdfs::message::DataNodeToClientMessage>(channel_.get(), cq, rpcmethod_Transfer_, context, request);
}

DataNodeService::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DataNodeService_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DataNodeService::Service, ::mdfs::message::DataNodeToDataNodeMessage, ::mdfs::message::DataNodeToDataNodeMessage>(
          std::mem_fn(&DataNodeService::Service::Communicate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DataNodeService_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DataNodeService::Service, ::mdfs::message::ClientToDataNodeMessage, ::mdfs::message::DataNodeToClientMessage>(
          std::mem_fn(&DataNodeService::Service::Transfer), this)));
}

DataNodeService::Service::~Service() {
}

::grpc::Status DataNodeService::Service::Communicate(::grpc::ServerContext* context, const ::mdfs::message::DataNodeToDataNodeMessage* request, ::mdfs::message::DataNodeToDataNodeMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DataNodeService::Service::Transfer(::grpc::ServerContext* context, const ::mdfs::message::ClientToDataNodeMessage* request, ::mdfs::message::DataNodeToClientMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mdfs
}  // namespace message

