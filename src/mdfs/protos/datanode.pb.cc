// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mdfs/protos/datanode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mdfs/protos/datanode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mdfs {
namespace message {

namespace {

const ::google::protobuf::Descriptor* TransferMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferReturnMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferReturnMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* DataNodeCommMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataNodeCommMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto() {
  protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mdfs/protos/datanode.proto");
  GOOGLE_CHECK(file != NULL);
  TransferMessage_descriptor_ = file->message_type(0);
  static const int TransferMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, data_),
  };
  TransferMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferMessage_descriptor_,
      TransferMessage::internal_default_instance(),
      TransferMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferMessage, _internal_metadata_));
  TransferReturnMessage_descriptor_ = file->message_type(1);
  static const int TransferReturnMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReturnMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReturnMessage, data_),
  };
  TransferReturnMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferReturnMessage_descriptor_,
      TransferReturnMessage::internal_default_instance(),
      TransferReturnMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferReturnMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferReturnMessage, _internal_metadata_));
  DataNodeCommMessage_descriptor_ = file->message_type(2);
  static const int DataNodeCommMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeCommMessage, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeCommMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeCommMessage, command_),
  };
  DataNodeCommMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DataNodeCommMessage_descriptor_,
      DataNodeCommMessage::internal_default_instance(),
      DataNodeCommMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(DataNodeCommMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataNodeCommMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mdfs_2fprotos_2fdatanode_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferMessage_descriptor_, TransferMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferReturnMessage_descriptor_, TransferReturnMessage::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DataNodeCommMessage_descriptor_, DataNodeCommMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto() {
  TransferMessage_default_instance_.Shutdown();
  delete TransferMessage_reflection_;
  TransferReturnMessage_default_instance_.Shutdown();
  delete TransferReturnMessage_reflection_;
  DataNodeCommMessage_default_instance_.Shutdown();
  delete DataNodeCommMessage_reflection_;
}

void protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mdfs::message::protobuf_InitDefaults_mdfs_2fprotos_2fblock_5finfo_2eproto();
  ::google::protobuf::internal::GetEmptyString();
  TransferMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TransferReturnMessage_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  DataNodeCommMessage_default_instance_.DefaultConstruct();
  TransferMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  TransferReturnMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
  DataNodeCommMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_once_);
void protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_once_,
                 &protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto_impl);
}
void protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032mdfs/protos/datanode.proto\022\014mdfs.messa"
    "ge\032\034mdfs/protos/block_info.proto\"X\n\017Tran"
    "sferMessage\022\017\n\007command\030\001 \001(\005\022&\n\005block\030\002 "
    "\001(\0132\027.mdfs.message.BlockInfo\022\014\n\004data\030\003 \001"
    "(\014\"5\n\025TransferReturnMessage\022\016\n\006status\030\001 "
    "\001(\005\022\014\n\004data\030\002 \001(\014\"\\\n\023DataNodeCommMessage"
    "\022&\n\005block\030\001 \001(\0132\027.mdfs.message.BlockInfo"
    "\022\014\n\004data\030\002 \001(\014\022\017\n\007command\030\003 \001(\0052\266\001\n\017Data"
    "NodeService\022S\n\013Communicate\022!.mdfs.messag"
    "e.DataNodeCommMessage\032!.mdfs.message.Dat"
    "aNodeCommMessage\022N\n\010Transfer\022\035.mdfs.mess"
    "age.TransferMessage\032#.mdfs.message.Trans"
    "ferReturnMessageb\006proto3", 504);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mdfs/protos/datanode.proto", &protobuf_RegisterTypes);
  ::mdfs::message::protobuf_AddDesc_mdfs_2fprotos_2fblock_5finfo_2eproto();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mdfs_2fprotos_2fdatanode_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_once_);
void protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_once_,
                 &protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mdfs_2fprotos_2fdatanode_2eproto {
  StaticDescriptorInitializer_mdfs_2fprotos_2fdatanode_2eproto() {
    protobuf_AddDesc_mdfs_2fprotos_2fdatanode_2eproto();
  }
} static_descriptor_initializer_mdfs_2fprotos_2fdatanode_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferMessage::kCommandFieldNumber;
const int TransferMessage::kBlockFieldNumber;
const int TransferMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferMessage::TransferMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdfs.message.TransferMessage)
}

void TransferMessage::InitAsDefaultInstance() {
  block_ = const_cast< ::mdfs::message::BlockInfo*>(
      ::mdfs::message::BlockInfo::internal_default_instance());
}

TransferMessage::TransferMessage(const TransferMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mdfs.message.TransferMessage)
}

void TransferMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_ = NULL;
  command_ = 0;
  _cached_size_ = 0;
}

TransferMessage::~TransferMessage() {
  // @@protoc_insertion_point(destructor:mdfs.message.TransferMessage)
  SharedDtor();
}

void TransferMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TransferMessage_default_instance_.get()) {
    delete block_;
  }
}

void TransferMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferMessage_descriptor_;
}

const TransferMessage& TransferMessage::default_instance() {
  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferMessage> TransferMessage_default_instance_;

TransferMessage* TransferMessage::New(::google::protobuf::Arena* arena) const {
  TransferMessage* n = new TransferMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mdfs.message.TransferMessage)
  command_ = 0;
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransferMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdfs.message.TransferMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 command = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }

      // optional .mdfs.message.BlockInfo block = 2;
      case 2: {
        if (tag == 18) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdfs.message.TransferMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdfs.message.TransferMessage)
  return false;
#undef DO_
}

void TransferMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdfs.message.TransferMessage)
  // optional int32 command = 1;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->command(), output);
  }

  // optional .mdfs.message.BlockInfo block = 2;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->block_, output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdfs.message.TransferMessage)
}

::google::protobuf::uint8* TransferMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mdfs.message.TransferMessage)
  // optional int32 command = 1;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->command(), target);
  }

  // optional .mdfs.message.BlockInfo block = 2;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->block_, false, target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdfs.message.TransferMessage)
  return target;
}

size_t TransferMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdfs.message.TransferMessage)
  size_t total_size = 0;

  // optional int32 command = 1;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  // optional .mdfs.message.BlockInfo block = 2;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdfs.message.TransferMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdfs.message.TransferMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdfs.message.TransferMessage)
    UnsafeMergeFrom(*source);
  }
}

void TransferMessage::MergeFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdfs.message.TransferMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferMessage::UnsafeMergeFrom(const TransferMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.command() != 0) {
    set_command(from.command());
  }
  if (from.has_block()) {
    mutable_block()->::mdfs::message::BlockInfo::MergeFrom(from.block());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TransferMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdfs.message.TransferMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferMessage::CopyFrom(const TransferMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdfs.message.TransferMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferMessage::IsInitialized() const {

  return true;
}

void TransferMessage::Swap(TransferMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferMessage::InternalSwap(TransferMessage* other) {
  std::swap(command_, other->command_);
  std::swap(block_, other->block_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferMessage_descriptor_;
  metadata.reflection = TransferMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferMessage

// optional int32 command = 1;
void TransferMessage::clear_command() {
  command_ = 0;
}
::google::protobuf::int32 TransferMessage::command() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.command)
  return command_;
}
void TransferMessage::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.TransferMessage.command)
}

// optional .mdfs.message.BlockInfo block = 2;
bool TransferMessage::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
void TransferMessage::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
const ::mdfs::message::BlockInfo& TransferMessage::block() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.block)
  return block_ != NULL ? *block_
                         : *::mdfs::message::BlockInfo::internal_default_instance();
}
::mdfs::message::BlockInfo* TransferMessage::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::mdfs::message::BlockInfo;
  }
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferMessage.block)
  return block_;
}
::mdfs::message::BlockInfo* TransferMessage::release_block() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferMessage.block)
  
  ::mdfs::message::BlockInfo* temp = block_;
  block_ = NULL;
  return temp;
}
void TransferMessage::set_allocated_block(::mdfs::message::BlockInfo* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferMessage.block)
}

// optional bytes data = 3;
void TransferMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransferMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.TransferMessage.data)
}
void TransferMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.TransferMessage.data)
}
void TransferMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.TransferMessage.data)
}
::std::string* TransferMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferMessage.data)
}

inline const TransferMessage* TransferMessage::internal_default_instance() {
  return &TransferMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransferReturnMessage::kStatusFieldNumber;
const int TransferReturnMessage::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransferReturnMessage::TransferReturnMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdfs.message.TransferReturnMessage)
}

void TransferReturnMessage::InitAsDefaultInstance() {
}

TransferReturnMessage::TransferReturnMessage(const TransferReturnMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mdfs.message.TransferReturnMessage)
}

void TransferReturnMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  _cached_size_ = 0;
}

TransferReturnMessage::~TransferReturnMessage() {
  // @@protoc_insertion_point(destructor:mdfs.message.TransferReturnMessage)
  SharedDtor();
}

void TransferReturnMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransferReturnMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferReturnMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferReturnMessage_descriptor_;
}

const TransferReturnMessage& TransferReturnMessage::default_instance() {
  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TransferReturnMessage> TransferReturnMessage_default_instance_;

TransferReturnMessage* TransferReturnMessage::New(::google::protobuf::Arena* arena) const {
  TransferReturnMessage* n = new TransferReturnMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferReturnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mdfs.message.TransferReturnMessage)
  status_ = 0;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TransferReturnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdfs.message.TransferReturnMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdfs.message.TransferReturnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdfs.message.TransferReturnMessage)
  return false;
#undef DO_
}

void TransferReturnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdfs.message.TransferReturnMessage)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdfs.message.TransferReturnMessage)
}

::google::protobuf::uint8* TransferReturnMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mdfs.message.TransferReturnMessage)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdfs.message.TransferReturnMessage)
  return target;
}

size_t TransferReturnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdfs.message.TransferReturnMessage)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferReturnMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdfs.message.TransferReturnMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferReturnMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferReturnMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdfs.message.TransferReturnMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdfs.message.TransferReturnMessage)
    UnsafeMergeFrom(*source);
  }
}

void TransferReturnMessage::MergeFrom(const TransferReturnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdfs.message.TransferReturnMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TransferReturnMessage::UnsafeMergeFrom(const TransferReturnMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TransferReturnMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdfs.message.TransferReturnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferReturnMessage::CopyFrom(const TransferReturnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdfs.message.TransferReturnMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TransferReturnMessage::IsInitialized() const {

  return true;
}

void TransferReturnMessage::Swap(TransferReturnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferReturnMessage::InternalSwap(TransferReturnMessage* other) {
  std::swap(status_, other->status_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferReturnMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferReturnMessage_descriptor_;
  metadata.reflection = TransferReturnMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferReturnMessage

// optional int32 status = 1;
void TransferReturnMessage::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 TransferReturnMessage::status() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferReturnMessage.status)
  return status_;
}
void TransferReturnMessage::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.TransferReturnMessage.status)
}

// optional bytes data = 2;
void TransferReturnMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& TransferReturnMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.TransferReturnMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferReturnMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.TransferReturnMessage.data)
}
void TransferReturnMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.TransferReturnMessage.data)
}
void TransferReturnMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.TransferReturnMessage.data)
}
::std::string* TransferReturnMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.TransferReturnMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransferReturnMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.TransferReturnMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransferReturnMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.TransferReturnMessage.data)
}

inline const TransferReturnMessage* TransferReturnMessage::internal_default_instance() {
  return &TransferReturnMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataNodeCommMessage::kBlockFieldNumber;
const int DataNodeCommMessage::kDataFieldNumber;
const int DataNodeCommMessage::kCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataNodeCommMessage::DataNodeCommMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:mdfs.message.DataNodeCommMessage)
}

void DataNodeCommMessage::InitAsDefaultInstance() {
  block_ = const_cast< ::mdfs::message::BlockInfo*>(
      ::mdfs::message::BlockInfo::internal_default_instance());
}

DataNodeCommMessage::DataNodeCommMessage(const DataNodeCommMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mdfs.message.DataNodeCommMessage)
}

void DataNodeCommMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  block_ = NULL;
  command_ = 0;
  _cached_size_ = 0;
}

DataNodeCommMessage::~DataNodeCommMessage() {
  // @@protoc_insertion_point(destructor:mdfs.message.DataNodeCommMessage)
  SharedDtor();
}

void DataNodeCommMessage::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &DataNodeCommMessage_default_instance_.get()) {
    delete block_;
  }
}

void DataNodeCommMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataNodeCommMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataNodeCommMessage_descriptor_;
}

const DataNodeCommMessage& DataNodeCommMessage::default_instance() {
  protobuf_InitDefaults_mdfs_2fprotos_2fdatanode_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DataNodeCommMessage> DataNodeCommMessage_default_instance_;

DataNodeCommMessage* DataNodeCommMessage::New(::google::protobuf::Arena* arena) const {
  DataNodeCommMessage* n = new DataNodeCommMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataNodeCommMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mdfs.message.DataNodeCommMessage)
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = 0;
}

bool DataNodeCommMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mdfs.message.DataNodeCommMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .mdfs.message.BlockInfo block = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_command;
        break;
      }

      // optional int32 command = 3;
      case 3: {
        if (tag == 24) {
         parse_command:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mdfs.message.DataNodeCommMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mdfs.message.DataNodeCommMessage)
  return false;
#undef DO_
}

void DataNodeCommMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mdfs.message.DataNodeCommMessage)
  // optional .mdfs.message.BlockInfo block = 1;
  if (this->has_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->block_, output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 command = 3;
  if (this->command() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->command(), output);
  }

  // @@protoc_insertion_point(serialize_end:mdfs.message.DataNodeCommMessage)
}

::google::protobuf::uint8* DataNodeCommMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:mdfs.message.DataNodeCommMessage)
  // optional .mdfs.message.BlockInfo block = 1;
  if (this->has_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->block_, false, target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 command = 3;
  if (this->command() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->command(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:mdfs.message.DataNodeCommMessage)
  return target;
}

size_t DataNodeCommMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mdfs.message.DataNodeCommMessage)
  size_t total_size = 0;

  // optional .mdfs.message.BlockInfo block = 1;
  if (this->has_block()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->block_);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional int32 command = 3;
  if (this->command() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->command());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataNodeCommMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mdfs.message.DataNodeCommMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DataNodeCommMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataNodeCommMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mdfs.message.DataNodeCommMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mdfs.message.DataNodeCommMessage)
    UnsafeMergeFrom(*source);
  }
}

void DataNodeCommMessage::MergeFrom(const DataNodeCommMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mdfs.message.DataNodeCommMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DataNodeCommMessage::UnsafeMergeFrom(const DataNodeCommMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.has_block()) {
    mutable_block()->::mdfs::message::BlockInfo::MergeFrom(from.block());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.command() != 0) {
    set_command(from.command());
  }
}

void DataNodeCommMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mdfs.message.DataNodeCommMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataNodeCommMessage::CopyFrom(const DataNodeCommMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mdfs.message.DataNodeCommMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DataNodeCommMessage::IsInitialized() const {

  return true;
}

void DataNodeCommMessage::Swap(DataNodeCommMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataNodeCommMessage::InternalSwap(DataNodeCommMessage* other) {
  std::swap(block_, other->block_);
  data_.Swap(&other->data_);
  std::swap(command_, other->command_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataNodeCommMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataNodeCommMessage_descriptor_;
  metadata.reflection = DataNodeCommMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataNodeCommMessage

// optional .mdfs.message.BlockInfo block = 1;
bool DataNodeCommMessage::has_block() const {
  return this != internal_default_instance() && block_ != NULL;
}
void DataNodeCommMessage::clear_block() {
  if (GetArenaNoVirtual() == NULL && block_ != NULL) delete block_;
  block_ = NULL;
}
const ::mdfs::message::BlockInfo& DataNodeCommMessage::block() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.block)
  return block_ != NULL ? *block_
                         : *::mdfs::message::BlockInfo::internal_default_instance();
}
::mdfs::message::BlockInfo* DataNodeCommMessage::mutable_block() {
  
  if (block_ == NULL) {
    block_ = new ::mdfs::message::BlockInfo;
  }
  // @@protoc_insertion_point(field_mutable:mdfs.message.DataNodeCommMessage.block)
  return block_;
}
::mdfs::message::BlockInfo* DataNodeCommMessage::release_block() {
  // @@protoc_insertion_point(field_release:mdfs.message.DataNodeCommMessage.block)
  
  ::mdfs::message::BlockInfo* temp = block_;
  block_ = NULL;
  return temp;
}
void DataNodeCommMessage::set_allocated_block(::mdfs::message::BlockInfo* block) {
  delete block_;
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.DataNodeCommMessage.block)
}

// optional bytes data = 2;
void DataNodeCommMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DataNodeCommMessage::data() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataNodeCommMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:mdfs.message.DataNodeCommMessage.data)
}
void DataNodeCommMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mdfs.message.DataNodeCommMessage.data)
}
void DataNodeCommMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mdfs.message.DataNodeCommMessage.data)
}
::std::string* DataNodeCommMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:mdfs.message.DataNodeCommMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataNodeCommMessage::release_data() {
  // @@protoc_insertion_point(field_release:mdfs.message.DataNodeCommMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataNodeCommMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mdfs.message.DataNodeCommMessage.data)
}

// optional int32 command = 3;
void DataNodeCommMessage::clear_command() {
  command_ = 0;
}
::google::protobuf::int32 DataNodeCommMessage::command() const {
  // @@protoc_insertion_point(field_get:mdfs.message.DataNodeCommMessage.command)
  return command_;
}
void DataNodeCommMessage::set_command(::google::protobuf::int32 value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:mdfs.message.DataNodeCommMessage.command)
}

inline const DataNodeCommMessage* DataNodeCommMessage::internal_default_instance() {
  return &DataNodeCommMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace mdfs

// @@protoc_insertion_point(global_scope)
